# First, include the template that defines .container_scan_base
include:
  - project: 'proxiad-academie/ops-monitoring'
    ref: experiment
    file: 'ci-templates/templates/core/.gitlab-ci-security-scanning.yml'

# Then include foundation (if needed for dependencies)
  - project: 'proxiad-academie/ops-monitoring'
    ref: experiment
    file: 'ci-templates/templates/core/.gitlab-ci-foundation.yml'

# Now you can safely extend .container_scan_base
container_scan:
  rules:
    - when: never
  
container_scan_angular:
  extends: .container_scan_base
  needs: ["docker_publish_angular"]

# Disable the original OWASP job
owasp_dependency_check:
  rules:
    - when: never

dependency_security_audit:
  extends: .angular_base
  stage: security
  needs: ["build"]
  script:
    - apk add --no-cache jq
    - echo "Running security audit on dependencies..."
    - npm audit --audit-level critical --json > npm-audit.json || true
    - npm audit --audit-level critical
    - echo "Checking for known security issues..."
    - |
      CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
      HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
      echo "Critical vulnerabilities: $CRITICAL_VULNS"
      echo "High vulnerabilities: $HIGH_VULNS"
      if [ "$CRITICAL_VULNS" -gt 0 ]; then
        echo "‚ùå Critical vulnerabilities found! Please fix before deploying to production."
        exit 1
      fi
  artifacts:
    reports:
      junit: npm-audit.json
    paths:
      - npm-audit.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"'

