stages:
  - checkout
  - build
  - deploy

variables:
    # GitLab Container Registry variables
  GITLAB_REGISTRY_URL: "$CI_REGISTRY"
  GITLAB_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE"
  GITLAB_REGISTRY_USER: "$CI_REGISTRY_USER"
  GITLAB_REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"
  


# Job Templates
.job_template: &job_definition
  tags:
    - docker
  before_script:
    - echo "starting job in ${CI_JOB_NAME} stage"

.node_job: &node_definition
  <<: *job_definition
  image: node:18-alpine
  cache:
    key: npm-cache
    paths:
      - .npm/
      - node_modules/
  before_script:
    - echo "Setting up Node.js environment..."
    - npm config set cache $NPM_CONFIG_CACHE --global
    - node --version
    - npm --version



# Jobs
checkout:
  <<: *job_definition
  stage: checkout
  before_script:
    - echo "Cleaning previous build artifacts..."
    - rm -rf dist/ node_modules/ .angular/
  script:
    - echo "Checking out code from ${CI_REPOSITORY_URL}"
  artifacts:
    paths:
      - ./

build:
  <<: *node_definition
  stage: build
  script:
    - echo "Installing dependencies..."
    - npm ci
    - echo "Building Angular application..."
    - npm run build -- --configuration=production --output-path=dist
    - echo "Build completed successfully!"
    - ls -la dist/
  artifacts:
    paths:
      - dist/
      - node_modules/
    expire_in: 1 hour



docker_publish:
  <<: *job_definition
  stage: docker
  image: docker:24.0
  variables:
    DOCKER_HOST: "unix:///var/run/docker.sock"
    DOCKER_BUILDKIT: 1
  before_script:
    - apk add --no-cache curl
    - echo "Using GitLab Container Registry $CI_REGISTRY_IMAGE"
    - echo "Commit SHA ${CI_COMMIT_SHORT_SHA}"
  script:
    - echo "=== BUILDING DOCKER IMAGE ==="
    - docker build -t "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}" -t "$CI_REGISTRY_IMAGE:latest" .

    - echo "=== LOGGING INTO GITLAB CONTAINER REGISTRY ==="
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin

    - echo "=== PUSHING IMAGES ==="
    - docker push "$CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"  # ou "main" si tu veux le faire sur main

